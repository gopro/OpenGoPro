/* cohn.proto/Open GoPro, Version 2.0 (C) Copyright 2021 GoPro, Inc. (http://gopro.com/OpenGoPro). */
/* This copyright was auto-generated on Tue Apr  9 19:25:32 UTC 2024 */

/***********************************************************************************************************************
 *
 * This file is automatically generated!!! Do not modify manually.
 *
 **********************************************************************************************************************/

/**
 * Defines the structure of protobuf messages for Camera On the Home Network
 */

syntax = "proto2";
package open_gopro;

import "response_generic.proto";

enum EnumCOHNStatus {
    COHN_UNPROVISIONED = 0;
    COHN_PROVISIONED   = 1;
}

enum EnumCOHNNetworkState {
    COHN_STATE_Init                = 0;
    COHN_STATE_Error               = 1;
    COHN_STATE_Exit                = 2;
    COHN_STATE_Idle                = 5;
    COHN_STATE_NetworkConnected    = 27;
    COHN_STATE_NetworkDisconnected = 28;
    COHN_STATE_ConnectingToNetwork = 29;
    COHN_STATE_Invalid             = 30;
}

/**
 * Get the current COHN status.
 *
 * Response: @ref NotifyCOHNStatus
 *
 * Additionally, asynchronous updates can also be registered to return more @ref NotifyCOHNStatus when a value
 * changes.
 */
message RequestGetCOHNStatus {
    optional bool register_cohn_status = 1; // 1 to register, 0 to unregister
}

/*
 * Current COHN status triggered by a @ref RequestGetCOHNStatus
 */
message NotifyCOHNStatus {
    optional EnumCOHNStatus       status     = 1; // Current COHN status
    optional EnumCOHNNetworkState state      = 2; // Current COHN network state
    optional string               username   = 3; // Username used for http basic auth header
    optional string               password   = 4; // Password used for http basic auth header
    optional string               ipaddress  = 5; // Camera's IP address on the local network
    optional bool                 enabled    = 6; // Is COHN currently enabled?
    optional string               ssid       = 7; // Currently connected SSID
    optional string               macaddress = 8; // MAC address of the wifi adapter
}

/**
 * Create the Camera On the Home Network SSL/TLS certificate.
 *
 * Returns a @ref ResponseGeneric with the status of the creation
 */
message RequestCreateCOHNCert {
    optional bool override = 1; // Override current provisioning and create new cert
}

/**
 * Clear the COHN certificate.
 *
 * Returns a @ref ResponseGeneric with the status of the clear
 */
message RequestClearCOHNCert {}

/**
 * Get the COHN certificate.
 *
 * Returns a @ref ResponseCOHNCert
 */
message RequestCOHNCert {}

/*
 * COHN Certificate response triggered by @ref RequestCOHNCert
 */
message ResponseCOHNCert {
    optional EnumResultGeneric result = 1; // Was request successful?
    optional string            cert   = 2; // Root CA cert (ASCII text)
}

/**
 * Configure a COHN Setting
 *
 * Returns a @ref ResponseGeneric
 */
message RequestSetCOHNSetting {
    /**
     * 1 to enable COHN, 0 to disable COHN
     *
     * When set to 1, STA Mode connection will be dropped and camera will not automatically re-connect for COHN.
     */
    optional bool cohn_active = 1;
}
